from numbers import Number
import typing

import numpy as np

from ._fit_negbinom_quantiles import fit_negbinom_quantiles
from ._sample_knockout import sample_knockout


def assay_additive_naive(
    test_knockout: typing.Callable,
    num_sites: int,
    knockout_doses: typing.List[int],
    num_replications: int = 100,
) -> dict:
    """Use knockout tests to estimate the prevalence of additive small-effect
    sites in genome and the average effect size of small-effect sites.

    Parameters
    ----------
    test_knockout : typing.Callable
        A function that tests the effect of a knockout, returning True if a
        knockout effect was detected and False otherwise.

        It should take boolean mask, e.g., produced by `sample_knockout`.
    num_sites : int
        Number of sites in genome
    knockout_doses : typing.List[int]
        A list of knockout doses (i.e., numbers of sites knocked out) to test.

        Can be generated by `pick_doses_extrema`.
    num_replications : int, default 100
        The number of replicate knockout trials to perform at each dose level.

    Returns
    -------
    dict
        A dictionary containing:
        - "num additive sites": Estimated number of additive sites.
        - "per-site effect size": Estimated effect size per site.
        - "negative binomial fit": Parameters of the fitted negative binomial
          distribution.
        - "knockout doses": List of knockout doses used.
        - "dose sensitivities": List of sensitivity values (fraction knockout
          trials with a detectable effect) for each dose.

    Notes
    -----
    This function computes the mean effect of knockouts over multiple
    replications for each dose, which are interpreted as estimates for the
    cumulative distribution function of a negative binomial distribution.

    A negative binomial distribution models the number of coin tosses performed
    to reach n successes, given that each toss succeeds with probability p.
    In the small-effect scenario, a successful coin toss corresponds to
    selecting a small-effect (i.e., non-neutral) site and n successes
    corresponds to reaching a sufficient cumulative effect to be observable.
    The fit parameters are used to estimate the small-effect characteristics
    as follows:
    - the number of additive sites is estimated as p times the number of sites
      in the genome (i.e., `num_sites`) and
    - the effect size is estimated as the inverse of success count n.
    """

    def check_effect(effect: Number) -> Number:
        if effect < 0:
            raise NotImplementedError(
                f"Adaptive knockout effect {effect} ocurred; "
                "naive additive assay only accounts for "
                "neutral or deleterious knockout effects",
            )

        return effect

    sensitivities = [
        np.mean(
            [
                np.sign(
                    check_effect(
                        test_knockout(sample_knockout(dose, num_sites))
                    ),
                )
                for __ in range(num_replications)
            ],
        )
        for dose in knockout_doses
    ]
    fit = fit_negbinom_quantiles(
        knockout_doses,
        sensitivities,
    )
    return {
        "num additive sites": fit["p"] * num_sites,
        "per-site effect size": 1 / fit["r"],
        "negative binomial fit": fit,
        "knockout doses": knockout_doses,
        "dose sensitivies": sensitivities,
    }
